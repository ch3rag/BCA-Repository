{\rtf1\ansi\ansicpg1252\deff0\deflang1033\deflangfe2052{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}{\f1\fnil\fcharset0 Courier New;}{\f2\fnil\fcharset0 Oswald;}{\f3\fnil\fcharset0 Verdana;}{\f4\fnil\fcharset0 Trebuchet MS;}}
{\colortbl ;\red0\green0\blue0;\red128\green128\blue128;}
{\stylesheet{ Normal;}{\s1 heading 1;}}
{\*\generator Msftedit 5.41.21.2509;}\viewkind4\uc1\pard\sl276\slmult1\cf1\b\f0\fs24\par
Create Database\b0\i\par
\b\i0\fs22\par
\b0\tab\f1 CREATE DATABASE <Database_name>;\par
\f0\tab\par
\tab\b\i\f1 CREATE DATABASE  npgcbca3;\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \sl276\slmult1\par
\pard\sl276\slmult1\par
\i0\f0\fs24 Listing Databases/Tables\par
\par
\i\f1\fs22\tab SHOW DATABASES\par
\tab SHOW TABLES\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \sl276\slmult1\par
\pard\sl276\slmult1\i0\f0\par
\fs24 Selecting database\par
\fs22\par
\pard\fi720\sl276\slmult1\b0\f1 USE <database_name>\par
\f0\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \fi720\sl276\slmult1\b\i\f1 Use npgcbca3;\par
\pard\sl276\slmult1\b0\i0\f0\par
\b\fs24 Deleting database\par
\b0\fs22\tab\par
\tab\f1 DROP <database_name>;\par
\f0\tab\b\i\f1\par
\tab Drop npgcbca3;\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \sl276\slmult1\par
\pard\sl276\slmult1\b0\i0\f0\par
\b\fs24 Creating table\par
\fs22\par
\b0\tab\f1 CREATE TABLE <Table_name> \par
\pard\fi720\li720\sl276\slmult1 (<Column_name_1> <data_type> <constraints>,\par
 <Column_name_2> <data_type> <constraints>,\par
 ..);\par
\pard\li720\sl276\slmult1\f0\par
\b\i\f1 CREATE TABLE Employee \par
\pard\fi720\li720\sl276\slmult1 (emp_id INT PRIMARY KEY,\par
 dept_id INT,\par
 emp_name VARCHAR(30),\par
 emp_address VARCHAR(30),\par
 emp_sal INT);\par
\par
\pard\li720\sl276\slmult1\b0\i0\f2 Constraints :\b\i\f1  \par
\par
\pard\fi-360\li1440\sl276\slmult1\tx1080\b0\i0\f3\u9679?\tab\b\i\f4 NOT NULL \b0\i0 - Ensures that a column cannot have a NULL value\par
\pard\li1440\sl276\slmult1\par
\pard\fi-360\li1440\sl276\slmult1\tx1080\f3\u9679?\tab\b\i\f4 UNIQUE\b0\i0  - Ensures that all values in a column are different\par
\pard\li1440\sl276\slmult1\par
\pard\fi-360\li1440\sl276\slmult1\tx1080\f3\u9679?\tab\b\i\f4 PRIMARY KEY\b0\i0  - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table\par
\pard\li1440\sl276\slmult1\par
\pard\fi-360\li1440\sl276\slmult1\tx1080\f3\u9679?\tab\b\i\f4 FOREIGN KEY\b0\i0  - Uniquely identifies a row/record in another table. \f3 The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables. E.g.\par
\pard\li2160\sl276\slmult1\f1 CREATE TABLE Orders (\par
\tab OrderID int NOT NULL PRIMARY KEY,\par
\pard\fi720\li1440\sl276\slmult1\tab PersonID int FOREIGN KEY REFERENCES Persons(PersonID));\par
\par
\pard\fi-360\li1440\sl276\slmult1\tx1080\f3\u9679?\tab\b\i\f4 CHECK \b0\i0 - Ensures that all values in a column satisfies a specific condition\par
\pard\li1440\sl276\slmult1\par
\pard\li2160\sl276\slmult1\f1\tab CREATE TABLE Persons (\par
\tab\tab ID int NOT NULL,\par
\tab\tab LastName varchar(255) NOT NULL,\par
\tab\tab FirstName varchar(255),\par
\tab\tab Age int CHECK (Age>=18));\par
\par
\pard\fi-360\li1440\sl276\slmult1\tx1080\f3\u9679?\tab\b\i\f4 DEFAULT\b0\i0  - Sets a default value for a column when no value is specified\par
\pard\li1440\sl276\slmult1\par
\pard\li2880\sl276\slmult1\f1 CREATE TABLE Persons (\par
\tab ID int NOT NULL,\par
\tab LastName varchar(255) NOT NULL,\par
\tab FirstName varchar(255),\par
\tab Age int,\par
\tab City varchar(255) DEFAULT 'Sandnes');\f4\tab\par
\pard\li1440\sl276\slmult1\par
\pard\fi-360\li1440\sl276\slmult1\tx1080\f3\u9679?\tab\b\i\f4 INDEX\b0\i0  - Used to create and retrieve data from the database very quickly\par
\pard\li1440\sl276\slmult1\par
\pard\li2880\sl276\slmult1\f1 CREATE INDEX idx_lastname ON Persons (LastName);\par
\par
-- TO REMOVE INDEX USE\par
DROP INDEX table_name.index_name;\par
\par
\pard\fi-360\li1440\sl276\slmult1\tx1080\f3\u9679?\tab\b\i\f4 AUTO_INCREMENT\b0\i0\f1  - \f4 Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table\f3 .\par
\pard\li1440\sl276\slmult1\par
\pard\li2160\sl276\slmult1\f1\tab CREATE TABLE Persons (\par
    \tab\tab ID int NOT NULL AUTO_INCREMENT = 100,\par
\tab\tab LastName varchar(255) NOT NULL,\par
\tab\tab FirstName varchar(255),\par
\tab\tab Age int,\par
    \tab\tab PRIMARY KEY (ID));\par
\par
\pard\li1440\sl276\slmult1\f3\tab\tab\f2 -- INITIAL VALUE IS 100. SQL SETS IT TO 1 IF NOT SPECIFIED\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \li720\sl276\slmult1\b\i\f1\par
\pard\sl276\slmult1\b0\i0\f0\par
\b\fs24 Create table from another table\par
\b0\fs22\tab\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \sl276\slmult1\par
\pard\sl276\slmult1\par
\b\fs24 Delete Table\par
\b0\fs22\par
\f1\tab DROP <table_name>\par
\tab\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \sl276\slmult1\tab\b\i DROP Employee\par
\pard\sl276\slmult1\i0\f0\par
\fs24 Truncate Table (Deletes only data but not table)\par
\b0\fs22\tab\par
\f1\tab TRUNCATE <table_name>\par
\tab\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \sl276\slmult1\tab\b\i TRUNCATE Employee\par
\pard\sl276\slmult1\par
\par
\par
\i0\f0\fs24 Alter Table\par
\b0\fs22\tab\par
\pard\fi720\sl276\slmult1\f2 1. Inserting new column\par
\pard\sl276\slmult1\f0\par
\pard\li1440\sl276\slmult1\f1 ALTER TABLE <table_name> Add <column_name> <data_type>\par
\par
\b\i ALTER TABLE Employee Add DOB datetime\par
\pard\fi720\li720\sl276\slmult1\par
\pard\fi720\sl276\slmult1\b0\i0\f2 2. Deleting a column\par
\pard\sl276\slmult1\tab\tab\par
\f1\tab\tab ALTER TABLE <table_name> DROP COLUMN <column_name>\par
\par
\tab\tab\b\i ALTER TABLE Employee DROP COLUMN DOB\par
\par
\pard\fi720\sl276\slmult1\b0\i0\f2  3. Changing datatype of column\par
\pard\sl276\slmult1\b\f0\par
\b0\f1\tab\tab ALTER TABLE <table_name> ALTER COLUMN <column_name> <data_type>\par
\par
\b\i\tab\tab ALTER TABLE Employee ALTER COLUMN emp_salary BIGINT\par
\par
\pard\fi720\sl276\slmult1\b0\i0\f2 4. Changing column name\par
\pard\sl276\slmult1\par
\f1\tab\tab EXEC sp_RENAME \lquote <table_name.old_column_name>\rquote , \lquote <new_name>\rquote , \lquote COLUMN\rquote\par
\b\i\par
\b0\i0\f2  \tab 5. Change table name\par
\par
\f1\tab\tab EXEC sp_RENAME \lquote <table_name.old_table_name>\rquote , \lquote <new_name>\rquote , \lquote COLUMN\rquote\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \sl276\slmult1\par
\pard\sl276\slmult1\par
\par
\b\f0\fs24 Create View\par
\fs22\par
\pard\li720\sl276\slmult1\b0\f3 In SQL, a view is a virtual table based on the result-set of an SQL statement.\par
A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.\par
\par
\f1 CREATE VIEW [<view_name>] AS\par
SELECT column1, column2, ...\par
FROM table_name\par
WHERE condition;\par
\pard\sl276\slmult1\tab\par
\par
\f2\tab\fs28 Examples :\f1  \par
\par
\pard\fi720\sl276\slmult1\f4\fs22 The view "Current Product List" lists all active products (products that are not discontinued) from the "Products" table. The view is created with the following SQL:\par
\par
\pard\li1440\sl276\slmult1\f1 CREATE VIEW [Current Product List] AS\par
SELECT ProductID, ProductName\par
FROM Products\par
WHERE Discontinued = No;\par
\f0\par
\pard\fi720\sl276\slmult1 Then, we can query the view as follows:\par
\par
\pard\fi720\li720\sl276\slmult1\f1 SELECT * FROM [Current Product List];\par
\f0\par
\pard\fi720\sl276\slmult1 Another view in the Northwind sample database selects every product in the "Products" table with a unit price higher than the average unit price:\par
\par
\pard\li1440\sl276\slmult1\f1 CREATE VIEW [Products Above Average Price] AS\par
SELECT ProductName, UnitPrice\par
FROM Products\par
WHERE UnitPrice > (SELECT AVG(UnitPrice) FROM Products);\par
\f0\par
\pard\fi720\sl276\slmult1 We can query the view above as follows:\par
\par
\pard\fi720\li720\sl276\slmult1\f1 SELECT * FROM [Products Above Average Price];\par
\f0\par
\pard\fi720\sl276\slmult1 Another view in the Northwind database calculates the total sale for each category in 1997. Note that this view selects its data from another view called "Product Sales for 1997":\par
\par
\pard\li1440\sl276\slmult1\f1 CREATE VIEW [Category Sales For 1997] AS\par
SELECT DISTINCT Category_Name, Sum(Product_Sales) AS Category_Sales\par
FROM [Product Sales for 1997]\par
GROUP BY CategoryName;\par
\f0\par
\pard\fi720\sl276\slmult1 We can query the view above as follows:\par
\pard\sl276\slmult1\par
\pard\fi720\li720\sl276\slmult1\f1 SELECT * FROM [Category Sales For 1997];\par
\f0\par
\pard\li720\sl276\slmult1 We can also add a condition to the query. Let's see the total sale only for the category "Beverages":\par
\par
\pard\li1440\sl276\slmult1\f1 SELECT * FROM [Category Sales For 1997]\par
WHERE CategoryName = 'Beverages';\fs24\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \sl276\slmult1\fs22\par
\pard\sl276\slmult1\par
\par
\f2\par
\pard\li1440\sl276\slmult1\f0\par
\pard\sl276\slmult1\b\fs24 Inserting data into table\par
\b0\fs22\tab\par
\tab\f1 INSERT INTO <table_name> VALUES(<column1_value>, <column2_value>, ..);\par
\par
\tab INSERT INTO <table_name> (<Column_name1>, <column_name_2>, \'85) \par
\pard\fi720\sl276\slmult1 Values (<column1_value>, <column2_value>, \'85);\par
\par
-- 8/9/2018\par
\b\i INSERT INTO Department VALUES(100, 'SALES');\par
INSERT INTO Department VALUES(200, 'MARKETING');\par
INSERT INTO Department VALUES(300, 'ADMINISTRATION');\par
INSERT INTO Department VALUES(400, 'PRODUCTION');\par
\par
INSERT INTO Employee VALUES(1000, 100, 'Satish Kumar', 'Lucknow', 10000);\par
INSERT INTO Employee VALUES(1001, 100, 'Abhay Bhist', 'Delhi', 12000);\par
INSERT INTO Employee VALUES(1002, 100, 'Kapil Rajput', 'Mumbai', 15000);\par
INSERT INTO Employee VALUES(1003, 100, 'Ravi Mishra', 'Kanpur', 11400);\par
INSERT INTO Employee VALUES(1004, 100, 'Neeraj Yadav', 'Banaras', 16500);\par
\par
INSERT INTO Employee VALUES(1005, 200, 'Chirag Singh', 'Lucknow', 17000);\par
INSERT INTO Employee VALUES(1006, 200, 'Raj Singh', 'Delhi', 12000);\par
INSERT INTO Employee VALUES(1007, 200, 'Ramesh Yadav', 'Allahabad', 21000);\par
INSERT INTO Employee VALUES(1008, 200, 'Rakesh Maurya', 'Mumbai', 22000);\par
INSERT INTO Employee VALUES(1009, 200, 'Amar Shukla', 'Lucknow', 20000);\par
\par
INSERT INTO Employee VALUES(1010, 300, 'Avinash Thakur', 'Mumbai', 21000);\par
INSERT INTO Employee VALUES(1011, 300, 'Vishal Yadav', 'Lucknow', 25000);\par
INSERT INTO Employee VALUES(1012, 300, 'Surendra Rao', 'Delhi', 26000);\par
INSERT INTO Employee VALUES(1013, 300, 'Satyendra Pawar', 'Banaras', 26500);\par
INSERT INTO Employee VALUES(1014, 300, 'Mohit Mishra', 'Kanpur', 26800);\par
\par
INSERT INTO Employee VALUES(1015, 400, 'Vivek Singh', 'Mumbai', 19000);\par
INSERT INTO Employee VALUES(1016, 400, 'Vipin Rajput', 'Kanpur', 18000);\par
INSERT INTO Employee VALUES(1017, 400, 'Vikas Dixit', 'Delhi', 21000);\par
INSERT INTO Employee VALUES(1018, 400, 'Ajit Kumar', 'Lucknow', 25000);\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \fi720\sl276\slmult1 INSERT INTO Employee VALUES(1019, 400, 'Aryan Srivastava', 'Lucknow', 29000);\par
\pard\sl276\slmult1\b0\i0\par
\par
\f0\tab\par
\par
\b\fs24 Printing String/Expression\par
\b0\fs22\tab\par
\tab\f1 SELECT \ldblquote String\rdblquote ;\par
\tab SELECT <Expression>\par
\pard\brdrb\brdrs\brdrw30\brdrcf2\brdrbtw\brdrbar \sl276\slmult1\par
\pard\sl276\slmult1\par
\par
\b\i\f0\fs36 Exercise\par
\pard\keep\keepn\nowidctlpar\s1\sb400\sa120\sl276\slmult1\qc\b0\i0\f2\fs22 Retrieve data from tables\par
\pard\sl276\slmult1\f0\fs26 Write a SQL statement to display all the information of all salesmen.\par
\f1\fs22\tab SELECT * FROM Salesman;\par
\f0\fs26\par
Write a SQL statement to display a string "This is SQL Exercise, Practice and Solution".\par
\f1\fs22\tab SELECT "This is SQL Exercise, Practice and Solution";\par
\f0\fs26\par
Write a query to display three numbers in three columns.\par
\f1\fs22\tab SELECT 1,2,3;\par
\f0\fs26\par
Write a query to display the sum of two numbers 10 and 15 from RDMS server.\par
\f1\fs22\tab SELECT 10+15;\par
\f0\fs26\par
Write a query to display the result of an arithmetic expression.\par
\f1\tab\fs22 SELECT (10+1)*5/3+2;\par
\f0\fs26\par
Write a SQL statement to display specific columns like name and commission for all the salesmen.\par
\f1\fs22\tab SELECT Name, Commission FROM Salesman;\par
\f0\fs26\par
Write a query to display the columns in a specific order like order date, salesman id, order number and purchase amount from for all the orders. \par
\f1\fs22\tab SELECT * From Orders ORDER BY Ord_Date DESC;\par
\tab SELECT * From Orders ORDER BY Salesman_ID;\par
\fs26\par
\f0 Write a query which will retrieve the value of salesman id of all salesmen, getting orders from the customers in orders table without any repeats.\par
\f1\fs22\tab SELECT DISTINCT (Salesman_id)  FROM Orders;\par
\f0\fs26\par
Write a SQL statement to display names and city of salesman, who belongs to the city of Paris.\par
\f1\fs22\tab SELECT Name, City FROM Salesman WHERE city = 'Paris';\par
\f0\fs26\par
Write a SQL statement to display all the information for those customers with a grade of 200. \par
\f1\fs22\tab SELECT * FROM CUSTOMER WHERE Grade = 200;\par
\f0\fs26\par
Write a SQL query to display the order number followed by order date and the purchase amount for each order which will be delivered by the salesman who is holding the ID 5001. \par
\pard\fi720\sl276\slmult1\f1\fs22 SELECT Ord_No, Ord_Date, Purch_Amt FROM Orders WHERE Salesman_ID = 5001;\par
\pard\sl276\slmult1\f0\fs26\par
Write a SQL query to display the Nobel prizes for 1970.\par
\f1\tab SELECT * FROM Nobel_Win Where Year = 1970;\par
\f0\par
Write a SQL query to know the winner of the 1971 prize for Literature.\par
\f1\fs22\tab SELECT * FROM Nobel_Win Where Year = 1971 AND Subject = 'Literature';\par
\f0\fs26\par
Write a SQL query to display the year and subject that won 'Dennis Gabor' his prize.\par
\pard\fi720\sl276\slmult1\f1\fs22 SELECT Year, Subject FROM Nobel_Win Where Winner = 'Dennis Gabor';\tab\par
\pard\sl276\slmult1\f0\fs26\tab\par
Write a SQL query to give the name of the 'Physics' winners since the year 1950.\par
\f1\fs22\tab SELECT Name FROM Nobel_Win WHERE Year >= 1950 AND Subject = \lquote Physics\rquote ;\par
\par
\f0\fs26 Write a SQL query to Show all the details (year, subject, winner, country ) of the Chemistry prize winners between the year 1965 to 1975 inclusive.\par
\tab\f1\fs22 SELECT * FROM Nobel_Win\par
\pard\fi720\sl276\slmult1 WHERE Year BETWEEN 1965 AND 1975 AND Subject = 'Chemistry\f0\fs26 ';\par
\pard\sl276\slmult1\par
Write a SQL query to show all details of the Prime Ministerial winners after 1972 of Menachem Begin and Yitzhak Rabin. \par
\tab\f1\fs22 SELECT * FROM Nobel_Win\par
\pard\fi720\sl276\slmult1 WHERE Year > 1972 AND Winner IN('Menachem Begin', 'Yitzhak Rabin');\par
\par
\pard\sl276\slmult1\f0\fs26 Write a SQL query to show all the details of the winners with first name Louis. \par
\tab\f1\fs22 SELECT * FROM Nobel_Win WHERE Winner LIKE 'Louis%';\par
\par
\f0\fs26 Write a SQL query to show all the winners in Physics for 1970 together with the winner of Economics for 1971.\par
\tab\f1\fs22 SELECT * FROM Nobel_Win \par
\pard\fi720\sl276\slmult1 WHERE (Year = 1970 AND Subject = 'Physics') \par
\pard\fi720\li720\sl276\slmult1  OR (Year = 1971 AND Subject = 'Economics');\par
\pard\li720\sl276\slmult1\par
\b OR\par
\par
\pard\fi720\sl276\slmult1\b0 SELECT * FROM Nobel_Win\par
\pard\li720\sl276\slmult1 WHERE (Year = 1970 AND Subject = 'Physics')\par
\b UNION\par
\b0 SELECT * FROM Nobel_Win\par
WHERE (Year = 1971 AND Subject = 'Economics')\par
\pard\sl276\slmult1\f0\fs26 Write a SQL query to show all the winners of nobel prize in the year 1970 except the subject Physiology and Economics. \par
\tab\f1\fs22 SELECT * FROM Nobel_Win WHERE Subject NOT IN('Physiology', 'Economics');\par
\par
\f0\fs26 Write a SQL query to show the winners of a 'Physiology' prize in an early year before 1971 together with winners of a 'Peace' prize in a later year on and after the 1974.\par
\pard\li720\sl276\slmult1\f1\fs22 SELECT * FROM Nobel_Win\par
WHERE(Year < 1971 AND Subject = 'Physiology')\par
UNION\par
SELECT * FROM Nobel_Win\par
WHERE (Year > 1974 AND Subject = 'Peace')\par
\pard\sl276\slmult1\f0\fs26\par
Write a SQL query to find all details of the prize won by Johannes Georg Bednorz.\par
\tab\f1\fs22 SELECT * FROM Nobel_Win Where Winner = 'Johannes Georg Bednorz';\par
\f0\fs26\par
Write a SQL query to find all the details of the nobel winners for the subject not started with the letter 'P' and arranged the list as the most recent comes first, then by name in order.\par
\f1\fs22\tab SELECT * FROM Nobel_Win\par
\pard\fi720\sl276\slmult1 WHERE Subject Not Like 'P%' ORDER BY Year DESC, Winner;\par
\pard\sl276\slmult1\f0\fs26\par
Write a SQL query to find all the details of 1970 winners by the ordered to subject and winner name; but the list contain the subject Economics and Chemistry at last.\par
\pard\li720\sl276\slmult1\f1\fs22 SELECT * FROM Nobel_Win\par
WHERE YEAR = 1970 ORDER BY \par
CASE WHEN Subject IN ('Chemistry', 'Economics') THEN 1 ELSE 0 \par
END, Subject, Winner;\par
\pard\sl276\slmult1\f0\fs26\par
Write a SQL query to find all the products with a price between Rs.200 and Rs.600\par
\tab\f1\fs22 SELECT * FROM Item_Mast WHERE Pro_Price BETWEEN 200 AND 600;\par
\par
\f0\fs26 Write a SQL query to calculate the average price of all products of the manufacturer which code is 16.   \par
\tab\f1\fs22 SELECT AVG(Pro_Price) FROM Item_Mast Where Pro_Com = 16;\par
\par
\f0\fs26  Write a SQL query to find the item name and price in Rs.\par
\pard\fi720\sl276\slmult1\f1\fs22 SELECT Pro_Name AS "Item Name", Pro_Price AS "Price In Rs." From Item_Mast;\par
\par
\pard\sl276\slmult1\f0\fs26 Write a SQL query to display the name and price of all the items with a price is equal or more than Rs.250, and the list contain the larger price first and then by name in ascending order.\par
\pard\fi720\sl276\slmult1\f1\fs22 SELECT Pro_Name, Pro_Price FROM Item_Mast \par
\pard\li720\sl276\slmult1 WHERE Pro_Price >= 250 ORDER BY Pro_Price DESC, Pro_Name;\par
\pard\fi720\li720\sl276\slmult1\par
\par
\pard\sl276\slmult1\f0\fs26 Write a SQL query to display the average price of the items for each company, showing only the company code. \par
\tab\f1\fs22 SELECT Pro_Com, AVG(Pro_Price) FROM Item_Mast GROUP BY Pro_Com;\par
\par
\f0\fs26 Write a SQL query to find the name and price of the cheapest item(s).\par
\tab\f1\fs22 SELECT Pro_Price, Pro_Name FROM Item_Mast \par
\pard\fi720\sl276\slmult1 Where Pro_Price = (SELECT MIN(Pro_Price) FROM Item_Mast); \par
\par
\pard\sl276\slmult1\f0\fs26 Write a query in SQL to find the last name of all employees, without duplicates. \par
\tab\f1\fs22 SELECT DISTINCT Emp_Lname FROM EMP_DETAILS\par
\par
\f0\fs26 Write a query in SQL to find the data of employees whose last name is 'Snares'\par
\tab\f1\fs22 SELECT * FROM EMP_DETAILS WHERE Emp_Lname = 'Snares'\par
\par
\f0\fs26 Write a query in SQL to display all the data of employees that work in the department 57.\par
\tab\f1\fs22 SELECT * FROM EMP_DETAILS WHERE Emp_Dept = 57\par
\f0\fs26\par
Write a query in SQL to display name, salary and department ID of employees having maximum salary in their respective department.\par
\f1\fs22\tab SELECT Emp_Name, Emp_Sal, Dept_ID FROM Employee\par
\pard\fi720\sl276\slmult1 WHERE Emp_Sal IN (Select MAX(Emp_Sal) FROM Employee GROUP BY Dept_ID);\par
\pard\sl276\slmult1\par
\par
\par
\par
}
 